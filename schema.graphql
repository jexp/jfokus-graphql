type Company {
	name: String!
	speakers: [Speaker!]! @relationship(type: "WORKS_AT", direction: IN)
}

type Presentation {
	id: BigInt!
	title: String!
	start: DateTime!
	end: DateTime!
	summary: String!
	inRoom: Room! @relationship(type: "IN_ROOM", direction: OUT)
	type: Type! @relationship(type: "OF_TYPE", direction: OUT)
	presentedBy: [Speaker!]! @relationship(type: "PRESENTS", direction: IN)
}

extend type Presentation {
  parallel: [Presentation!]! 
  	@cypher(statement: """
      	MATCH (p:Presentation) 
        WHERE p.start >= this.start AND p.end <= this.end 
        RETURN p
      """)
}

type Room {
	id: String!
	presentations: [Presentation!]! @relationship(type: "IN_ROOM", direction: IN)
}

type Speaker {
	bio: String!
	fullName: String!
	id: BigInt!
	imageUrl: String!
	presents: [Presentation!]! @relationship(type: "PRESENTS", direction: OUT)
	twitterHandle: String
	worksAt: [Company!]! @relationship(type: "WORKS_AT", direction: OUT)
}

type Type {
	name: String!
	presentations: [Presentation!]! @relationship(type: "OF_TYPE", direction: IN)
}
